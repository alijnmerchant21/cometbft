// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: msgs.proto

package orderbook

import (
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type MsgBid struct {
	Pair     *Pair     `protobuf:"bytes,1,opt,name=pair,proto3" json:"pair,omitempty"`
	BidOrder *OrderBid `protobuf:"bytes,2,opt,name=bid_order,json=bidOrder,proto3" json:"bid_order,omitempty"`
}

func (m *MsgBid) Reset()         { *m = MsgBid{} }
func (m *MsgBid) String() string { return proto.CompactTextString(m) }
func (*MsgBid) ProtoMessage()    {}
func (*MsgBid) Descriptor() ([]byte, []int) {
	return fileDescriptor_952909143bb80d72, []int{0}
}
func (m *MsgBid) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgBid) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgBid.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgBid) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgBid.Merge(m, src)
}
func (m *MsgBid) XXX_Size() int {
	return m.Size()
}
func (m *MsgBid) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgBid.DiscardUnknown(m)
}

var xxx_messageInfo_MsgBid proto.InternalMessageInfo

func (m *MsgBid) GetPair() *Pair {
	if m != nil {
		return m.Pair
	}
	return nil
}

func (m *MsgBid) GetBidOrder() *OrderBid {
	if m != nil {
		return m.BidOrder
	}
	return nil
}

type MsgAsk struct {
	Pair     *Pair     `protobuf:"bytes,1,opt,name=pair,proto3" json:"pair,omitempty"`
	AskOrder *OrderAsk `protobuf:"bytes,2,opt,name=ask_order,json=askOrder,proto3" json:"ask_order,omitempty"`
}

func (m *MsgAsk) Reset()         { *m = MsgAsk{} }
func (m *MsgAsk) String() string { return proto.CompactTextString(m) }
func (*MsgAsk) ProtoMessage()    {}
func (*MsgAsk) Descriptor() ([]byte, []int) {
	return fileDescriptor_952909143bb80d72, []int{1}
}
func (m *MsgAsk) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgAsk) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgAsk.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgAsk) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgAsk.Merge(m, src)
}
func (m *MsgAsk) XXX_Size() int {
	return m.Size()
}
func (m *MsgAsk) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgAsk.DiscardUnknown(m)
}

var xxx_messageInfo_MsgAsk proto.InternalMessageInfo

func (m *MsgAsk) GetPair() *Pair {
	if m != nil {
		return m.Pair
	}
	return nil
}

func (m *MsgAsk) GetAskOrder() *OrderAsk {
	if m != nil {
		return m.AskOrder
	}
	return nil
}

type MsgCreateAccount struct {
	PublicKey   []byte       `protobuf:"bytes,1,opt,name=public_key,json=publicKey,proto3" json:"public_key,omitempty"`
	Commodities []*Commodity `protobuf:"bytes,2,rep,name=commodities,proto3" json:"commodities,omitempty"`
}

func (m *MsgCreateAccount) Reset()         { *m = MsgCreateAccount{} }
func (m *MsgCreateAccount) String() string { return proto.CompactTextString(m) }
func (*MsgCreateAccount) ProtoMessage()    {}
func (*MsgCreateAccount) Descriptor() ([]byte, []int) {
	return fileDescriptor_952909143bb80d72, []int{2}
}
func (m *MsgCreateAccount) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgCreateAccount) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgCreateAccount.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgCreateAccount) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgCreateAccount.Merge(m, src)
}
func (m *MsgCreateAccount) XXX_Size() int {
	return m.Size()
}
func (m *MsgCreateAccount) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgCreateAccount.DiscardUnknown(m)
}

var xxx_messageInfo_MsgCreateAccount proto.InternalMessageInfo

func (m *MsgCreateAccount) GetPublicKey() []byte {
	if m != nil {
		return m.PublicKey
	}
	return nil
}

func (m *MsgCreateAccount) GetCommodities() []*Commodity {
	if m != nil {
		return m.Commodities
	}
	return nil
}

type MsgRegisterPair struct {
	Pair *Pair `protobuf:"bytes,1,opt,name=pair,proto3" json:"pair,omitempty"`
}

func (m *MsgRegisterPair) Reset()         { *m = MsgRegisterPair{} }
func (m *MsgRegisterPair) String() string { return proto.CompactTextString(m) }
func (*MsgRegisterPair) ProtoMessage()    {}
func (*MsgRegisterPair) Descriptor() ([]byte, []int) {
	return fileDescriptor_952909143bb80d72, []int{3}
}
func (m *MsgRegisterPair) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgRegisterPair) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgRegisterPair.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgRegisterPair) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgRegisterPair.Merge(m, src)
}
func (m *MsgRegisterPair) XXX_Size() int {
	return m.Size()
}
func (m *MsgRegisterPair) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgRegisterPair.DiscardUnknown(m)
}

var xxx_messageInfo_MsgRegisterPair proto.InternalMessageInfo

func (m *MsgRegisterPair) GetPair() *Pair {
	if m != nil {
		return m.Pair
	}
	return nil
}

type MsgTradeSet struct {
	TradeSet *TradeSet `protobuf:"bytes,1,opt,name=trade_set,json=tradeSet,proto3" json:"trade_set,omitempty"`
}

func (m *MsgTradeSet) Reset()         { *m = MsgTradeSet{} }
func (m *MsgTradeSet) String() string { return proto.CompactTextString(m) }
func (*MsgTradeSet) ProtoMessage()    {}
func (*MsgTradeSet) Descriptor() ([]byte, []int) {
	return fileDescriptor_952909143bb80d72, []int{4}
}
func (m *MsgTradeSet) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgTradeSet) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgTradeSet.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgTradeSet) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgTradeSet.Merge(m, src)
}
func (m *MsgTradeSet) XXX_Size() int {
	return m.Size()
}
func (m *MsgTradeSet) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgTradeSet.DiscardUnknown(m)
}

var xxx_messageInfo_MsgTradeSet proto.InternalMessageInfo

func (m *MsgTradeSet) GetTradeSet() *TradeSet {
	if m != nil {
		return m.TradeSet
	}
	return nil
}

type Msg struct {
	//a Msg has to be one of the below
	//
	// Types that are valid to be assigned to Sum:
	//	*Msg_MsgBid
	//	*Msg_MsgAsk
	//	*Msg_MsgRegisterPair
	//	*Msg_MsgCreateAccount
	//	*Msg_MsgTradeSet
	Sum isMsg_Sum `protobuf_oneof:"sum"`
}

func (m *Msg) Reset()         { *m = Msg{} }
func (m *Msg) String() string { return proto.CompactTextString(m) }
func (*Msg) ProtoMessage()    {}
func (*Msg) Descriptor() ([]byte, []int) {
	return fileDescriptor_952909143bb80d72, []int{5}
}
func (m *Msg) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Msg) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Msg.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Msg) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Msg.Merge(m, src)
}
func (m *Msg) XXX_Size() int {
	return m.Size()
}
func (m *Msg) XXX_DiscardUnknown() {
	xxx_messageInfo_Msg.DiscardUnknown(m)
}

var xxx_messageInfo_Msg proto.InternalMessageInfo

type isMsg_Sum interface {
	isMsg_Sum()
	MarshalTo([]byte) (int, error)
	Size() int
}

type Msg_MsgBid struct {
	MsgBid *MsgBid `protobuf:"bytes,1,opt,name=msg_bid,json=msgBid,proto3,oneof" json:"msg_bid,omitempty"`
}
type Msg_MsgAsk struct {
	MsgAsk *MsgAsk `protobuf:"bytes,2,opt,name=msg_ask,json=msgAsk,proto3,oneof" json:"msg_ask,omitempty"`
}
type Msg_MsgRegisterPair struct {
	MsgRegisterPair *MsgRegisterPair `protobuf:"bytes,3,opt,name=msg_register_pair,json=msgRegisterPair,proto3,oneof" json:"msg_register_pair,omitempty"`
}
type Msg_MsgCreateAccount struct {
	MsgCreateAccount *MsgCreateAccount `protobuf:"bytes,4,opt,name=msg_create_account,json=msgCreateAccount,proto3,oneof" json:"msg_create_account,omitempty"`
}
type Msg_MsgTradeSet struct {
	MsgTradeSet *MsgTradeSet `protobuf:"bytes,5,opt,name=msg_trade_set,json=msgTradeSet,proto3,oneof" json:"msg_trade_set,omitempty"`
}

func (*Msg_MsgBid) isMsg_Sum()           {}
func (*Msg_MsgAsk) isMsg_Sum()           {}
func (*Msg_MsgRegisterPair) isMsg_Sum()  {}
func (*Msg_MsgCreateAccount) isMsg_Sum() {}
func (*Msg_MsgTradeSet) isMsg_Sum()      {}

func (m *Msg) GetSum() isMsg_Sum {
	if m != nil {
		return m.Sum
	}
	return nil
}

func (m *Msg) GetMsgBid() *MsgBid {
	if x, ok := m.GetSum().(*Msg_MsgBid); ok {
		return x.MsgBid
	}
	return nil
}

func (m *Msg) GetMsgAsk() *MsgAsk {
	if x, ok := m.GetSum().(*Msg_MsgAsk); ok {
		return x.MsgAsk
	}
	return nil
}

func (m *Msg) GetMsgRegisterPair() *MsgRegisterPair {
	if x, ok := m.GetSum().(*Msg_MsgRegisterPair); ok {
		return x.MsgRegisterPair
	}
	return nil
}

func (m *Msg) GetMsgCreateAccount() *MsgCreateAccount {
	if x, ok := m.GetSum().(*Msg_MsgCreateAccount); ok {
		return x.MsgCreateAccount
	}
	return nil
}

func (m *Msg) GetMsgTradeSet() *MsgTradeSet {
	if x, ok := m.GetSum().(*Msg_MsgTradeSet); ok {
		return x.MsgTradeSet
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*Msg) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*Msg_MsgBid)(nil),
		(*Msg_MsgAsk)(nil),
		(*Msg_MsgRegisterPair)(nil),
		(*Msg_MsgCreateAccount)(nil),
		(*Msg_MsgTradeSet)(nil),
	}
}

func init() {
	proto.RegisterType((*MsgBid)(nil), "orderbook.MsgBid")
	proto.RegisterType((*MsgAsk)(nil), "orderbook.MsgAsk")
	proto.RegisterType((*MsgCreateAccount)(nil), "orderbook.MsgCreateAccount")
	proto.RegisterType((*MsgRegisterPair)(nil), "orderbook.MsgRegisterPair")
	proto.RegisterType((*MsgTradeSet)(nil), "orderbook.MsgTradeSet")
	proto.RegisterType((*Msg)(nil), "orderbook.Msg")
}

func init() { proto.RegisterFile("msgs.proto", fileDescriptor_952909143bb80d72) }

var fileDescriptor_952909143bb80d72 = []byte{
	// 460 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x53, 0xc1, 0x6f, 0xd3, 0x3e,
	0x18, 0x4d, 0xda, 0xad, 0xbf, 0xf6, 0xcb, 0x0f, 0x75, 0x0b, 0x08, 0x55, 0x43, 0x44, 0x53, 0xb9,
	0xec, 0x80, 0x5a, 0x34, 0xa4, 0x71, 0x41, 0x42, 0xed, 0x2e, 0x91, 0xa6, 0x08, 0x30, 0x9c, 0xb8,
	0x44, 0x4e, 0x6c, 0x19, 0x2b, 0x73, 0x5d, 0xf9, 0x73, 0x05, 0xfd, 0x2f, 0xf8, 0x87, 0xb8, 0x73,
	0xdc, 0x91, 0x23, 0x6a, 0xff, 0x11, 0x14, 0xc7, 0xdb, 0xd2, 0x1e, 0xd0, 0x6e, 0x9f, 0xed, 0xf7,
	0xbd, 0x97, 0xf7, 0x9e, 0x02, 0xa0, 0x50, 0xe0, 0x64, 0x69, 0xb4, 0xd5, 0xf1, 0x40, 0x1b, 0xc6,
	0x4d, 0xa1, 0x75, 0x75, 0x02, 0xdf, 0xa4, 0xe1, 0xcd, 0xf5, 0x38, 0x87, 0x5e, 0x86, 0x62, 0x2e,
	0x59, 0xfc, 0x02, 0x0e, 0x96, 0x54, 0x9a, 0x51, 0x78, 0x1a, 0x9e, 0x45, 0xe7, 0xc3, 0xc9, 0x1d,
	0x7e, 0xf2, 0x81, 0x4a, 0x43, 0xdc, 0x63, 0xfc, 0x0a, 0x06, 0x85, 0x64, 0xb9, 0x7b, 0x1b, 0x75,
	0x1c, 0xf2, 0x71, 0x0b, 0xf9, 0xbe, 0x9e, 0xe6, 0x92, 0x91, 0x7e, 0x21, 0x99, 0x3b, 0x78, 0x81,
	0x19, 0x56, 0x0f, 0x16, 0xa0, 0x58, 0xfd, 0x5b, 0x60, 0x86, 0x15, 0xe9, 0x53, 0xac, 0x1a, 0x01,
	0x09, 0x47, 0x19, 0x8a, 0x4b, 0xc3, 0xa9, 0xe5, 0xb3, 0xb2, 0xd4, 0xab, 0x85, 0x8d, 0x9f, 0x03,
	0x2c, 0x57, 0xc5, 0xb5, 0x2c, 0xf3, 0x8a, 0xaf, 0x9d, 0xe0, 0xff, 0x64, 0xd0, 0xdc, 0x5c, 0xf1,
	0x75, 0x7c, 0x01, 0x51, 0xa9, 0x95, 0xd2, 0x4c, 0x5a, 0xc9, 0x71, 0xd4, 0x39, 0xed, 0x9e, 0x45,
	0xe7, 0x4f, 0x5a, 0x32, 0x97, 0xfe, 0x75, 0x4d, 0xda, 0xc0, 0xf1, 0x05, 0x0c, 0x33, 0x14, 0x84,
	0x0b, 0x89, 0x96, 0x9b, 0xfa, 0xab, 0x1f, 0x64, 0x6a, 0xfc, 0x0e, 0xa2, 0x0c, 0xc5, 0x67, 0x43,
	0x19, 0xff, 0xc4, 0x6d, 0xed, 0xd1, 0xd6, 0x73, 0x8e, 0xdc, 0xfa, 0xc5, 0xb6, 0xc7, 0x5b, 0x1c,
	0xe9, 0x5b, 0x3f, 0x8d, 0x7f, 0x76, 0xa0, 0x9b, 0xa1, 0x88, 0x5f, 0xc2, 0x7f, 0x0a, 0x45, 0x5e,
	0x48, 0xe6, 0xf7, 0x8e, 0x5b, 0x7b, 0x4d, 0x8f, 0x69, 0x40, 0x7a, 0xaa, 0x69, 0xd4, 0xa3, 0x29,
	0x56, 0x3e, 0xc9, 0x3d, 0xf4, 0x0c, 0x2b, 0x8f, 0xae, 0xeb, 0x49, 0xe1, 0xb8, 0x46, 0x1b, 0xef,
	0x2e, 0x77, 0xb6, 0xba, 0x6e, 0xef, 0x64, 0x77, 0xaf, 0x1d, 0x40, 0x1a, 0x90, 0xa1, 0xda, 0xcb,
	0xe4, 0x0a, 0xe2, 0x9a, 0xa9, 0x74, 0x95, 0xe4, 0xb4, 0xe9, 0x64, 0x74, 0xe0, 0xa8, 0x9e, 0xed,
	0x52, 0xed, 0xd4, 0x96, 0x06, 0xe4, 0x48, 0xed, 0x57, 0xf9, 0x16, 0x1e, 0xd5, 0x64, 0xf7, 0x81,
	0x1d, 0x3a, 0x9e, 0xa7, 0xbb, 0x3c, 0xb7, 0x99, 0xa5, 0x01, 0x89, 0xd4, 0xfd, 0x71, 0x7e, 0x08,
	0x5d, 0x5c, 0xa9, 0xf9, 0xc7, 0x5f, 0x9b, 0x24, 0xbc, 0xd9, 0x24, 0xe1, 0x9f, 0x4d, 0x12, 0xfe,
	0xd8, 0x26, 0xc1, 0xcd, 0x36, 0x09, 0x7e, 0x6f, 0x93, 0xe0, 0xcb, 0x1b, 0x21, 0xed, 0xd7, 0x55,
	0x31, 0x29, 0xb5, 0x9a, 0x5a, 0xbe, 0x60, 0xdc, 0x28, 0xb9, 0xb0, 0xed, 0x91, 0x16, 0xa5, 0x9c,
	0xf2, 0xef, 0x54, 0x2d, 0xaf, 0xf9, 0xf4, 0x4e, 0xb4, 0xe8, 0xb9, 0xff, 0xe7, 0xf5, 0xdf, 0x00,
	0x00, 0x00, 0xff, 0xff, 0x14, 0xd7, 0x67, 0x64, 0x64, 0x03, 0x00, 0x00,
}

func (m *MsgBid) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgBid) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgBid) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.BidOrder != nil {
		{
			size, err := m.BidOrder.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMsgs(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.Pair != nil {
		{
			size, err := m.Pair.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMsgs(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgAsk) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgAsk) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgAsk) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.AskOrder != nil {
		{
			size, err := m.AskOrder.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMsgs(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.Pair != nil {
		{
			size, err := m.Pair.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMsgs(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgCreateAccount) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgCreateAccount) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgCreateAccount) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Commodities) > 0 {
		for iNdEx := len(m.Commodities) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Commodities[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintMsgs(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.PublicKey) > 0 {
		i -= len(m.PublicKey)
		copy(dAtA[i:], m.PublicKey)
		i = encodeVarintMsgs(dAtA, i, uint64(len(m.PublicKey)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgRegisterPair) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgRegisterPair) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgRegisterPair) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pair != nil {
		{
			size, err := m.Pair.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMsgs(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgTradeSet) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgTradeSet) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgTradeSet) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.TradeSet != nil {
		{
			size, err := m.TradeSet.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMsgs(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Msg) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Msg) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Msg) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Sum != nil {
		{
			size := m.Sum.Size()
			i -= size
			if _, err := m.Sum.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	return len(dAtA) - i, nil
}

func (m *Msg_MsgBid) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Msg_MsgBid) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.MsgBid != nil {
		{
			size, err := m.MsgBid.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMsgs(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}
func (m *Msg_MsgAsk) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Msg_MsgAsk) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.MsgAsk != nil {
		{
			size, err := m.MsgAsk.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMsgs(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	return len(dAtA) - i, nil
}
func (m *Msg_MsgRegisterPair) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Msg_MsgRegisterPair) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.MsgRegisterPair != nil {
		{
			size, err := m.MsgRegisterPair.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMsgs(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	return len(dAtA) - i, nil
}
func (m *Msg_MsgCreateAccount) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Msg_MsgCreateAccount) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.MsgCreateAccount != nil {
		{
			size, err := m.MsgCreateAccount.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMsgs(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	return len(dAtA) - i, nil
}
func (m *Msg_MsgTradeSet) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Msg_MsgTradeSet) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.MsgTradeSet != nil {
		{
			size, err := m.MsgTradeSet.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMsgs(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	return len(dAtA) - i, nil
}
func encodeVarintMsgs(dAtA []byte, offset int, v uint64) int {
	offset -= sovMsgs(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *MsgBid) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pair != nil {
		l = m.Pair.Size()
		n += 1 + l + sovMsgs(uint64(l))
	}
	if m.BidOrder != nil {
		l = m.BidOrder.Size()
		n += 1 + l + sovMsgs(uint64(l))
	}
	return n
}

func (m *MsgAsk) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pair != nil {
		l = m.Pair.Size()
		n += 1 + l + sovMsgs(uint64(l))
	}
	if m.AskOrder != nil {
		l = m.AskOrder.Size()
		n += 1 + l + sovMsgs(uint64(l))
	}
	return n
}

func (m *MsgCreateAccount) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.PublicKey)
	if l > 0 {
		n += 1 + l + sovMsgs(uint64(l))
	}
	if len(m.Commodities) > 0 {
		for _, e := range m.Commodities {
			l = e.Size()
			n += 1 + l + sovMsgs(uint64(l))
		}
	}
	return n
}

func (m *MsgRegisterPair) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pair != nil {
		l = m.Pair.Size()
		n += 1 + l + sovMsgs(uint64(l))
	}
	return n
}

func (m *MsgTradeSet) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.TradeSet != nil {
		l = m.TradeSet.Size()
		n += 1 + l + sovMsgs(uint64(l))
	}
	return n
}

func (m *Msg) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Sum != nil {
		n += m.Sum.Size()
	}
	return n
}

func (m *Msg_MsgBid) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.MsgBid != nil {
		l = m.MsgBid.Size()
		n += 1 + l + sovMsgs(uint64(l))
	}
	return n
}
func (m *Msg_MsgAsk) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.MsgAsk != nil {
		l = m.MsgAsk.Size()
		n += 1 + l + sovMsgs(uint64(l))
	}
	return n
}
func (m *Msg_MsgRegisterPair) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.MsgRegisterPair != nil {
		l = m.MsgRegisterPair.Size()
		n += 1 + l + sovMsgs(uint64(l))
	}
	return n
}
func (m *Msg_MsgCreateAccount) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.MsgCreateAccount != nil {
		l = m.MsgCreateAccount.Size()
		n += 1 + l + sovMsgs(uint64(l))
	}
	return n
}
func (m *Msg_MsgTradeSet) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.MsgTradeSet != nil {
		l = m.MsgTradeSet.Size()
		n += 1 + l + sovMsgs(uint64(l))
	}
	return n
}

func sovMsgs(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozMsgs(x uint64) (n int) {
	return sovMsgs(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *MsgBid) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMsgs
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgBid: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgBid: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pair", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMsgs
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMsgs
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pair == nil {
				m.Pair = &Pair{}
			}
			if err := m.Pair.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BidOrder", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMsgs
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMsgs
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.BidOrder == nil {
				m.BidOrder = &OrderBid{}
			}
			if err := m.BidOrder.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMsgs(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMsgs
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgAsk) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMsgs
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgAsk: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgAsk: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pair", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMsgs
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMsgs
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pair == nil {
				m.Pair = &Pair{}
			}
			if err := m.Pair.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AskOrder", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMsgs
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMsgs
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.AskOrder == nil {
				m.AskOrder = &OrderAsk{}
			}
			if err := m.AskOrder.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMsgs(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMsgs
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgCreateAccount) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMsgs
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgCreateAccount: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgCreateAccount: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PublicKey", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthMsgs
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthMsgs
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PublicKey = append(m.PublicKey[:0], dAtA[iNdEx:postIndex]...)
			if m.PublicKey == nil {
				m.PublicKey = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Commodities", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMsgs
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMsgs
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Commodities = append(m.Commodities, &Commodity{})
			if err := m.Commodities[len(m.Commodities)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMsgs(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMsgs
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgRegisterPair) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMsgs
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgRegisterPair: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgRegisterPair: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pair", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMsgs
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMsgs
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pair == nil {
				m.Pair = &Pair{}
			}
			if err := m.Pair.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMsgs(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMsgs
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgTradeSet) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMsgs
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgTradeSet: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgTradeSet: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TradeSet", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMsgs
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMsgs
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.TradeSet == nil {
				m.TradeSet = &TradeSet{}
			}
			if err := m.TradeSet.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMsgs(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMsgs
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Msg) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMsgs
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Msg: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Msg: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MsgBid", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMsgs
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMsgs
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &MsgBid{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Sum = &Msg_MsgBid{v}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MsgAsk", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMsgs
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMsgs
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &MsgAsk{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Sum = &Msg_MsgAsk{v}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MsgRegisterPair", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMsgs
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMsgs
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &MsgRegisterPair{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Sum = &Msg_MsgRegisterPair{v}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MsgCreateAccount", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMsgs
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMsgs
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &MsgCreateAccount{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Sum = &Msg_MsgCreateAccount{v}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MsgTradeSet", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMsgs
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMsgs
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &MsgTradeSet{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Sum = &Msg_MsgTradeSet{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMsgs(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMsgs
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipMsgs(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowMsgs
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowMsgs
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowMsgs
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthMsgs
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupMsgs
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthMsgs
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthMsgs        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowMsgs          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupMsgs = fmt.Errorf("proto: unexpected end of group")
)
